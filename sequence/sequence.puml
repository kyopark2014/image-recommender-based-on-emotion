@startuml Sequence Diagram - Sprites

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/master/dist
!includeurl AWSPuml/AWSCommon.puml
!includeurl AWSPuml/Compute/all.puml
!includeurl AWSPuml/Mobile/APIGateway.puml
!includeurl AWSPuml/General/InternetGateway.puml
!includeurl AWSPuml/Database/DynamoDB.puml
!includeurl AWSPuml/Database/ElastiCache.puml
!includeurl AWSPuml/Storage/SimpleStorageServiceS3.puml
!includeurl AWSPuml/NetworkingAndContentDelivery/CloudFront.puml
!includeurl AWSPuml/ApplicationIntegration/SNS.puml
!includeurl AWSPuml/MachineLearning/Rekognition.puml
!includeurl AWSPuml/MachineLearning/Polly.puml
!includeurl AWSPuml/MachineLearning/Personalize.puml
!includeurl AWSPuml/ApplicationIntegration/SQS.puml

'Comment out to use default PlantUML sequence formatting
skinparam participant {
    BackgroundColor AWS_BG_COLOR
    BorderColor AWS_BORDER_COLOR
}
'Hide the bottom boxes
hide footbox

actor Administrator as admin
actor User as user
participant "<color:#magenta><$CloudFront></color>\nAmazon CloudFront" as cdn
participant "<color:#red><$APIGateway>\nAmazon API Gateway" as api
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(emotion)" as lambdaEmotion
participant "<color:#green><$SimpleStorageServiceS3></color>\nAmazon S3" as s3
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(s3-event)" as lambdaS3Event
participant "<color:#green><$Rekognition></color>\nAmazon\nRekognition" as rekognition
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(gallery)" as lambdaGallery
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(like)" as lambdaLike
participant "<color:#green><$Personalize></color>\nPersonalize" as personalize

participant "<color:#magenta><$SQS></color>\nAmazon SQS\nRekognition" as sqsRekognition
participant "<color:#D86613><$Lambda></color>\nAmazon Lambda\n(Rekognition)" as lambdaRekognition
participant "<color:#magenta><$SQS></color>\nAmazon SQS\nPolly" as sqsPolly
participant "Email Server\n<color:#232F3E><$InternetGateway></color>" as pop3


admin -> s3: images
s3 -> admin
s3 -> lambdaS3Event ++: putEvent
lambdaS3Event -> personalize ++: putItems
personalize -> lambdaS3Event --
lambdaS3Event -> s3 --

user -> cdn: emotion Image\nPOST /emotion

cdn -> api: invoke lambda

api -> lambdaEmotion ++ : /emotion

lambdaEmotion -> s3 ++: putObject
s3 --> lambdaEmotion --: 


lambdaEmotion -> rekognition ++: image 
rekognition -> lambdaEmotion --: userId/emotion

lambdaEmotion -> personalize ++: putUsers
personalize -> lambdaEmotion --:

lambdaEmotion -> api -- : 200OK


api -> cdn: 200OK

cdn -> user: 200OK


user -> cdn: POST /gallery
cdn -> api: /gallery (emotion)
api -> lambdaGallery: /gallery (emotion)
lambdaGallery -> personalize ++: getRecommendations (userId)
personalize -> lambdaGallery --: 200OK (JSON)
lambdaGallery -> api: 200OK (JSON)
api -> cdn: 200OK (JSON)
cdn -> user: 200OK (JSON)

user -> cdn: POST /like
cdn -> api: /like
api -> lambdaLike++ : /like
lambdaLike -> personalize ++: putEvents
personalize -> lambdaLike --: 200OK
lambdaLike -> api --: 200OK
api -> cdn: 200OK
cdn -> user: 200OK




/' 
#lambdaUpload -> sqsRekognition -- : event (bucket, key)

#sqsRekognition -> lambdaRekognition ++ : event (bucket, key)

#lambdaRekognition -> rekognition ++: request (bucket, key)

#rekognition -> rekognition : Image to JSON

#rekognition -> lambdaRekognition -- : 200OK (JSON)

#lambdaRekognition -> lambdaRekognition : JSON to text


#lambdaRekognition -> sqsPolly -- : event (text)

#sqsPolly -> lambdaPolly ++ : event (text)


#lambdaPolly -> polly ++ : request\n(text, dest bucket)

#polly -> polly : test to voice

#polly -> s3 : upload mp3

#polly -> lambdaPolly --: url

#lambdaPolly -> sns --: publish url

#sns -> pop3 : request Email

#pop3 -> user : Email notification

#user -> cdn : request to download

#cdn -> s3: load mp3
#s3 --> cdn : 

#cdn -> user : 200OK with mp3
'/ 
@enduml